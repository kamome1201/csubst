#! /usr/bin/env python

import argparse
import datetime
import time
from distutils.util import strtobool

from csubst.__init__ import __version__
from csubst import param

# Start time
csubst_start = time.time()
print('CSUBST start:', datetime.datetime.now(datetime.timezone.utc), flush=True)

def command_dataset(args):
    print('csubst dataset start:', datetime.datetime.now(datetime.timezone.utc), flush=True)
    start = time.time()
    from csubst.main_dataset import main_dataset
    g = param.get_global_parameters(args)
    main_dataset(g)
    print('csubst dataset: Time elapsed: {:,} sec'.format(int(time.time() - start)))
    print('csubst dataset end:', datetime.datetime.now(datetime.timezone.utc), flush=True)

def command_simulate(args):
    print('csubst simulate start:', datetime.datetime.now(datetime.timezone.utc), flush=True)
    start = time.time()
    from csubst.main_simulate import main_simulate
    g = param.get_global_parameters(args)
    main_simulate(g)
    print('csubst simulate: Time elapsed: {:,} sec'.format(int(time.time() - start)))
    print('csubst simulate end:', datetime.datetime.now(datetime.timezone.utc), flush=True)

def command_site(args):
    print('csubst site start:', datetime.datetime.now(datetime.timezone.utc), flush=True)
    start = time.time()
    from csubst.main_site import main_site
    g = param.get_global_parameters(args)
    main_site(g)
    print('csubst site: Time elapsed: {:,} sec'.format(int(time.time() - start)))
    print('csubst site end:', datetime.datetime.now(datetime.timezone.utc), flush=True)

def command_analyze(args):
    print('csubst analyze start:', datetime.datetime.now(datetime.timezone.utc), flush=True)
    start = time.time()
    from csubst.main_analyze import main_analyze
    g = param.get_global_parameters(args)
    main_analyze(g)
    print('csubst analyze: Time elapsed: {:,} sec'.format(int(time.time() - start)))
    print('csubst analyze end:', datetime.datetime.now(datetime.timezone.utc), flush=True)

def command_help(args):
    print(parser.parse_args([args.command, '--help']))

# Main parser
parser = argparse.ArgumentParser(description='csubst - a toolkit for molecular convergence')
parser.add_argument('--version', action='version', version='csubst version ' + __version__)
subparsers = parser.add_subparsers()

# shared: common
psr_co = argparse.ArgumentParser(add_help=False)
psr_co.add_argument('--alignment_file', metavar='PATH', default='', type=str,
                   help='default=%(default)s: Alignment fasta file.')
psr_co.add_argument('--rooted_tree_file', metavar='PATH', default='', type=str,
                   help='default=%(default)s: Rooted newick tree file.')
psr_co.add_argument('--genetic_code', metavar='INTEGER', type=int, required=False, default=1,
                   help='default=%(default)s: NCBI codon table ID. 1 = "Standard". See here: '
                        'https://www.ncbi.nlm.nih.gov/Taxonomy/Utils/wprintgc.cgi')
psr_co.add_argument('--infile_type', metavar='[iqtree]', default='iqtree', type=str, choices=['iqtree',],
                   help='default=%(default)s: The input file format.')
psr_co.add_argument('--threads', metavar='INTEGER', default=1, type=int, required=False,
                   help='default=%(default)s: The number of processors for parallel computations.')
psr_co.add_argument('--parallel_mode', metavar='thread|process', default='process', type=str,
                    choices=['thread','process'],
                    help='default=%(default)s: Mode of parallel computation.')
psr_co.add_argument('--float_type', metavar='16|32|64', default=64, type=int, required=False,
                    help='default=%(default)s: Float data type for tensors. "16" is not recommended.')

# shared: IQ-TREE inputs
psr_iq = argparse.ArgumentParser(add_help=False)
psr_iq.add_argument('--iqtree_exe', metavar='PATH', default='iqtree', type=str, required=False,
                    help='default=%(default)s: PATH to the IQ-TREE executable')
psr_iq.add_argument('--iqtree_model', metavar='STR', default='ECMK07+F+R4', type=str, required=False,
                    help='default=%(default)s: Codon substitution model. '
                         'Base models of "MG", "GY", "ECMK07", and "ECMrest" are supported. '
                         'Among-site rate heterogeneity and codon frequencies can be specified. '
                         'See here for details: http://www.iqtree.org/doc/Substitution-Models')
psr_iq.add_argument('--iqtree_redo', metavar='yes|no', default='yes', type=strtobool,
                    help='default=%(default)s: Whether to rerun IQ-TREE even if all intermediate files exist.')
psr_iq.add_argument('--iqtree_treefile', metavar='PATH', default='infer', type=str, required=False,
                   help='default=%(default)s: PATH to the IQ-TREE\'s .treefile output. "infer" from --alignment_file')
psr_iq.add_argument('--iqtree_state', metavar='PATH', default='infer', type=str, required=False,
                   help='default=%(default)s: PATH to the IQ-TREE\'s .state output. "infer" from --alignment_file')
psr_iq.add_argument('--iqtree_rate', metavar='PATH', default='infer', type=str, required=False,
                   help='default=%(default)s: PATH to the IQ-TREE\'s .rate output. "infer" from --alignment_file')
psr_iq.add_argument('--iqtree_iqtree', metavar='PATH', default='infer', type=str, required=False,
                   help='default=%(default)s: PATH to the IQ-TREE\'s .iqtree output. "infer" from --alignment_file')
psr_iq.add_argument('--iqtree_log', metavar='PATH', default='infer', type=str, required=False,
                    help='default=%(default)s: PATH to the IQ-TREE\'s .log output. "infer" from --alignment_file')

# shared: Ancestral_state
psr_as = argparse.ArgumentParser(add_help=False)
psr_as.add_argument('--ml_anc', metavar='yes|no', default='no', type=strtobool,
                    help='default=%(default)s: Maximum-likelihood-like analysis by binarizing ancestral states.')
psr_as.add_argument('--min_sub_pp', metavar='FLOAT', default=0, type=float,
                     help='default=%(default)s: The minimum posterior probability of single substitutions to count. '
                          'Set 0 for a counting without binarization. Omitted if --ml_anc is set to "yes".')

# shared: PhyloBayes inputs
psr_pb = argparse.ArgumentParser(add_help=False)
#psr_pb.add_argument('--phylobayes_dir', metavar='PATH', default='./', type=str, required=False,
#                   help='default=%(default)s: PATH to the PhyloBayes output directory.')

# shared: foreground
psr_fg = argparse.ArgumentParser(add_help=False)
psr_fg.add_argument('--foreground', metavar='PATH', default=None, type=str, required=False,
                help='default=%(default)s: Foreground taxa for higher-order analysis. '
                     'The file should contain two columns separated by a tab: '
                     '1st column for lineage IDs and 2nd for regex-compatible leaf names.')
psr_fg.add_argument('--fg_exclude_wg', metavar='yes|no', default='yes', type=strtobool,
                help='default=%(default)s: Set "yes" to exclude branch combinations '
                     'within individual foreground lineages.')
psr_fg.add_argument('--fg_stem_only', metavar='yes|no', default='yes', type=strtobool,
                help='default=%(default)s: Set "yes" to exclude non-stem branches of foreground lineages.')
psr_fg.add_argument('--mg_parent', metavar='yes|no', default='no', type=strtobool,
                help='default=%(default)s: Mark the parent branches of the foreground stem branches as "marginal". '
                     'They may serve as "negative controls" relative to the foreground lineages.')
psr_fg.add_argument('--mg_sister', metavar='yes|no', default='yes', type=strtobool,
                help='default=%(default)s: Mark the sister branches of the foreground stem branches as "marginal". '
                     'They may serve as "negative controls" relative to the foreground lineages.')
psr_fg.add_argument('--mg_sister_stem_only', metavar='yes|no', default='yes', type=strtobool,
                help='default=%(default)s: Set "yes" to exclude non-stem branches of sister lineages.')
psr_fg.add_argument('--fg_random', metavar='INT', default=0, type=int,
                help='default=%(default)s: Randomly select the same number and size of clades as foreground '
                     'and run analysis N times. Larger numbers may take time.')


# dataset
dataset = subparsers.add_parser('dataset', help='see `csubst dataset -h`', parents=[])
dataset.add_argument('--name', metavar='STR', default='PGK', type=str, choices=['PGK',],
                     help='default=%(default)s: Name of dataset to generate.')
dataset.set_defaults(handler=command_dataset)


# simulate
simulate = subparsers.add_parser('simulate', help='see `csubst simulate -h`', parents=[psr_co,psr_iq,psr_pb,psr_fg])
simulate.add_argument('--background_omega', metavar='FLOAT', default=0.2, type=float,
                      help='default=%(default)s: dN/dS for background branches.')
simulate.add_argument('--foreground_omega', metavar='FLOAT', default=0.2, type=float,
                      help='default=%(default)s: dN/dS for foreground branches.')
simulate.add_argument('--num_simulated_site', metavar='INT', default=-1, type=int,
                      help='default=%(default)s: Number of codon sites to simulate. '
                           '-1 to set the size of input alignment.')
simulate.add_argument('--percent_convergent_site', metavar='FLOAT', default=100, type=float,
                      help='default=%(default)s: Percentage of codon sites to evolve convergently.'
                           'If --convergent_amino_acids randomN, '
                           'Convergent amino acids are randomly selected within each partition. ')
simulate.add_argument('--optimized_branch_length', metavar='yes|no', default='no', type=strtobool,
                      help='default=%(default)s: Whether to use the branch lengths optimized by IQ-TREE. '
                           'If "no", the branch lengths in the input tree are used.')
simulate.add_argument('--tree_scaling_factor', metavar='FLOAT', default=1, type=float,
                      help='default=%(default)s: Branch lengths are multiplied by this value.')
simulate.add_argument('--foreground_scaling_factor', metavar='FLOAT', default=1, type=float,
                      help='default=%(default)s: In the codon sites specified by --percent_convergent_site, '
                           'branch lengths in foreground lineages are multiplied by this value.')
simulate.add_argument('--convergent_amino_acids', metavar='STR', default='random1', type=str,
                      help='default=%(default)s: Non-delimited list of amino acids the sequences converge into. '
                           'e.g, AQTS, ACQ, WDETS... '
                           '"randomN" specifies randomly selected N amino acids. '
                           '"random0" does not cause convergence.')
simulate.add_argument('--percent_biased_sub', metavar='FLOAT', default=90, type=float,
                      help='default=%(default)s: Approximately this percentage of nonsynonymous substitutions '
                           'in the foreground branches/sites are biased toward amino acids specified by '
                           '--convergent_amino_acids, while preserving the original relative codon frequencies '
                           'among the synonymous codons.')
simulate.set_defaults(handler=command_simulate)


# site
site = subparsers.add_parser('site', help='see `csubst site -h`', parents=[psr_co,psr_iq,psr_as])
site.add_argument('--branch_id', metavar='INT,INT,INT...', default=None, required=True, type=str,
                  help='default=%(default)s: Comma-delimited list of branch_ids to characterize.'
                  'Run `csubst analyze` first and select branches of interest.')
site.add_argument('--untrimmed_cds', metavar='PATH', default=None, required=False, type=str,
                  help='default=%(default)s: PATH to fasta file containing untrimmed CDS sequence(s).'
                       'Codon positions along the sequence(s) appear in the output tsv.')
site.add_argument('--export2chimera', metavar='yes|no', default='no', required=False, type=strtobool,
                  help='default=%(default)s: Set "yes" to export files for the visualization of '
                       'convergence/divergence probabilities with UCSF Chimera. --untrimmed_cds is required.')
site.set_defaults(handler=command_site)


# analyze
analyze = subparsers.add_parser('analyze', help='see `csubst analyze -h`', parents=[psr_co,psr_iq,psr_pb,psr_fg,psr_as])
analyze.set_defaults(handler=command_analyze)
# Foreground specification
analyze.add_argument('--force_exhaustive', metavar='yes|no', default='no', type=strtobool,
                     help='default=%(default)s: Set "yes" to analyze all branch combinations even with foreground specification.')
# branch combinations
analyze.add_argument('--max_arity', metavar='INTEGER', default=2, type=int,
                     help='default=%(default)s: The maximum combinatorial number of branches. '
                          'Set 2 for paired substitutions. 3 or larger for higher-order combinations.')
analyze.add_argument('--exclude_sister_pair', metavar='yes|no', default='yes', type=strtobool,
                     help='default=%(default)s: Set "yes" to exclude sister branches in branch combination analysis.')
# Thresholds
analyze.add_argument('--cutoff_stat', metavar='[omega_any2spe|omega_any2any|QNany2spe...]', default='omega_any2spe',
                     type=str,
                     help='default=%(default)s: The statistics used to explore higher-order branch combinations.')
analyze.add_argument('--cutoff_stat_min', metavar='FLOAT', default=1.0, type=float,
                     help='default=%(default)s: If a branch combination has a cutoff_stat value greater than this value, '
                          'higher-order combinations are explored.')
analyze.add_argument('--min_branch_sub', metavar='FLOAT', default=1.0, type=float,
                     help='default=%(default)s: Minimum substitutions in a branch. '
                          'Branches < min_branch_sub are excluded from branch combination analyses.')
analyze.add_argument('--min_combinat_sub', metavar='FLOAT', default=1.0, type=float,
                     help='default=%(default)s: Minimum combinatorial substitutions (Sany2any+Nany2any). '
                          'Branch combinations < min_combinat_sub are excluded from higher-order analyses.')
# Substitution outputs
analyze.add_argument('--b', metavar='yes|no', default='yes', type=strtobool,
                     help='default=%(default)s: Branch output. Set "yes" to generate the output.')
analyze.add_argument('--s', metavar='yes|no', default='no', type=strtobool,
                     help='default=%(default)s: Site output. Set "yes" to generate the output.')
analyze.add_argument('--cs', metavar='yes|no', default='no', type=strtobool,
                     help='default=%(default)s: Combinatorial-site output. Set "yes" to generate the output.')
analyze.add_argument('--cb', metavar='yes|no', default='yes', type=strtobool,
                     help='default=%(default)s: Combinatorial-branch output. Set "yes" to generate the output.')
analyze.add_argument('--bs', metavar='yes|no', default='no', type=strtobool,
                     help='default=%(default)s: Branch-site output. 0 or 1. Set "yes" to generate the output.')
analyze.add_argument('--cbs', metavar='yes|no', default='no', type=strtobool,
                     help='default=%(default)s: Combinatorial-branch-site output. Set "yes" to generate the output.')
# Plot outputs
analyze.add_argument('--plot_state_aa', metavar='yes|no', default='no', type=strtobool,
                     help='default=%(default)s: Tree plots with per-site ancestral amino acid states. '
                          'This option will generate many pdfs')
analyze.add_argument('--plot_state_codon', metavar='yes|no', default='no', type=strtobool,
                     help='default=%(default)s: Tree plots with per-site ancestral codon states. '
                          'This option will generate many pdfs')
# Omega calculation
analyze.add_argument('--calc_omega', metavar='yes|no', default='yes', type=strtobool,
                     help='default=%(default)s: Calculate omega for convergence rate.')
analyze.add_argument('--omega_method', metavar='[modelfree|submodel]', default='submodel', type=str,
                     choices=['modelfree','submodel'],
                     help='default=%(default)s: Method to calculate omega. '
                          '"modelfree" for expected values from among-site randomization of substitutions. '
                          'All EXany2any, EXspe2any, EXany2spe, and EXspe2spe substitutions are individually calculated.'
                          '"submodel" for a method similar to Zou and Zhang (2015) using a codon substitution model used in '
                          'ancestral state reconstruction. '
                          'In addition to the base substitution models, codon frequencies and '
                          'among-site rate heterogeneity are taken into account.')
analyze.add_argument('--substitution_types', metavar='STR', default='any2any,any2spe,spe2spe', type=str,
                     help='default=%(default)s: Comma-delimited types of substitutions to be analyzed.'
                          'One or more from any2any, any2spe, spe2any, spe2spe')
analyze.add_argument('--calc_quantile', metavar='yes|no', default='no', type=strtobool,
                     help='default=%(default)s: Calculate resampling-based quantiles in '
                          'Wallenius\' noncentral hypergeometric distribution for combinatorial substitutions. '
                          'This option should be used with --omega method "modelfree".')
analyze.add_argument('--asrv', metavar='no|pool|sn|each|file', default='each', type=str,
                     choices=['no', 'pool', 'sn', 'each', 'file'],
                     help='default=%(default)s: Correct among-site rate variation in omega/quantile calculation. '
                          '"no", No ASRV, meaning the uniform rate among sites. '
                          '"pool", All categories of substitutions are pooled to calculate ASRV. '
                          '"sn", Synonymous and nonsynonymous substitutions are processed individually '
                          'to calculate their respective ASRVs.'
                          '"each", Each of 61x60 patterns of substitutions are processed individually '
                          'to calculate their respective ASRVs.'
                          '"file", ASRV is obtained from the IQ-TREE\'s .rate file.'
                          'This option is used if --omega_method modelfree')
analyze.add_argument('--calibrate_ratediff', metavar='yes|no', default='yes', type=strtobool,
                     help='default=%(default)s: Calibrate dSc to follow the distribution of dNc. '
                          'This quantile-based transformation accounts for diminishing convergence over time '
                          '(Goldstein et al., 2015; Zou and Zhang, 2015; Mendes et al., 2016).')
analyze.add_argument('--min_ratediff_combinat_sub', metavar='FLOAT', default=0, type=float,
                     help='default=%(default)s: Minimum number of combinatorial nonsynonymous substitutions (ONc) '
                          'to be included in the quantile-based transformation.')
# Sub parser: help
parser_help = subparsers.add_parser('help', help='see `help -h`')
parser_help.add_argument('command', help='command name which help is shown')
parser_help.set_defaults(handler=command_help)

# Handler
args = parser.parse_args()
param.set_num_thread_variables(num_thread=args.threads)
if hasattr(args, 'handler'):
    args.handler(args)
else:
    parser.print_help()

# End time
txt = '\nCSUBST end: {}, Elapsed time = {:,.1f} sec'
print(txt.format(datetime.datetime.now(datetime.timezone.utc), int(time.time()-csubst_start)), flush=True)
