#! /usr/bin/env python

# omega_asrv can be larger than omega_flat when,
# for example, ASRV is less biased in nonsyonymous substitutions
# for example, # nonsyonymous substs are largely different between branch 1 and branch 2

# TODO: sparse https://sparse.pydata.org/en/stable/
# TODO: cb_stat output with concentration rate
# TODO: concentration rate with random foreground

import argparse
import datetime
import time
from distutils.util import strtobool
from csubst.main import *
from csubst.__init__ import __version__

psr = argparse.ArgumentParser()

# Inputs
psr.add_argument('--ncbi_codon_table', metavar='INTEGER', type=int, required=False, default=1,
                 help='default=%(default)s: NCBI codon table ID. See here: '
                      'https://www.ncbi.nlm.nih.gov/Taxonomy/Utils/wprintgc.cgi')
psr.add_argument('--infile_dir', metavar='PATH', type=str, required=True,
                 help='default=%(default)s: PATH to the input file directory.')
psr.add_argument('--infile_type', metavar='[phylobayes|iqtree]', default='iqtree', type=str,
                 choices=['iqtree', 'phylobayes'],
                 help='default=%(default)s: The input file format. PhyloBayes input may not work currently.')
psr.add_argument('--aln_file', metavar='PATH', default='', type=str,
                 help='default=%(default)s: Alignment fasta file. Specify if csubst cannot find it in the infile_dir.')
psr.add_argument('--tre_file', metavar='PATH', default='', type=str,
                 help='default=%(default)s: Rooted newick tree file. Specify if csubst cannot find it in the infile_dir.')

# Foreground specification
psr.add_argument('--foreground', metavar='PATH', default=None, type=str,
                 help='default=%(default)s: Foreground taxa for higher-order analysis. '
                      'The file should contain two columns separated by a tab: '
                      '1st column for lineage IDs and 2nd for regex-compatible leaf names.')
psr.add_argument('--exclude_wg', metavar='yes|no', default='yes', type=strtobool,
                 help='default=%(default)s: Set "yes" to exclude branches within individual foreground lineages '
                      'in branch combination analysis.')
psr.add_argument('--fg_stem_only', metavar='yes|no', default='no', type=strtobool,
                 help='default=%(default)s: Set "yes" to exclude non-stem branches of foreground lineages.')
psr.add_argument('--fg_parent', metavar='yes|no', default='no', type=strtobool,
                 help='default=%(default)s: Include the parent branches of the foreground stem branches. '
                      'They may serve as "negative controls" relative to the foreground lineages.')
psr.add_argument('--fg_sister', metavar='yes|no', default='no', type=strtobool,
                 help='default=%(default)s: Include the sister branches of the foreground stem branches. '
                      'They may serve as "negative controls" relative to the foreground lineages.')
psr.add_argument('--fg_sister_stem_only', metavar='yes|no', default='no', type=strtobool,
                 help='default=%(default)s: Set "yes" to exclude non-stem branches of sister lineages.')
psr.add_argument('--fg_random', metavar='INT', default=0, type=int,
                 help='default=%(default)s: Randomly select the same number and size of clades as foreground '
                      'and run analysis N times. Larger numbers may take time.'
                 )


# branch combinations
psr.add_argument('--max_arity', metavar='INTEGER', default=2, type=int,
                 help='default=%(default)s: The maximum combinatorial number of branches. '
                      'Set 2 for paired substitutions. 3 or larger for higher-order combinations.')
psr.add_argument('--exclude_sisters', metavar='yes|no', default='yes', type=strtobool,
                 help='default=%(default)s: Set "yes" to exclude sister branches in branch combination analysis.')

# Thresholds
psr.add_argument('--ml_anc', metavar='yes|no', default='yes', type=strtobool,
                 help='default=%(default)s: Maximum-likelihood-like analysis by binarizing ancestral states.')
psr.add_argument('--min_sub_pp', metavar='FLOAT', default=0, type=float,
                 help='default=%(default)s: The minimum posterior probability of single substitutions to count. '
                      'Set 0 for a full Bayesian counting without binarization. Omitted if --ml_anc is set to "yes".')
psr.add_argument('--target_stat', metavar='[omega_any2spe|omega_any2any|QNany2spe...]', default='omega_any2spe', type=str,
                 help='default=%(default)s: The statistics used to explore higher-order branch combinations.')
psr.add_argument('--min_stat', metavar='FLOAT', default=1.0, type=float,
                 help='default=%(default)s: If a branch combination has a target_stat value greater than this value, '
                      'higher-order combinations are explored.')
psr.add_argument('--min_branch_sub', metavar='FLOAT', default=1.0, type=float,
                 help='default=%(default)s: Minimum substitutions in a branch. '
                      'Branches < min_branch_sub are excluded from branch combination analyses.')
psr.add_argument('--min_combinat_sub', metavar='FLOAT', default=1.0, type=float,
                 help='default=%(default)s: Minimum combinatorial substitutions (Sany2any+Nany2any). '
                      'Branch combinations < min_combinat_sub are excluded from higher-order analyses.')

# Outputs
psr.add_argument('--b', metavar='yes|no', default='yes', type=strtobool,
                 help='default=%(default)s: Branch output. Set "yes" to generate the output.')
psr.add_argument('--s', metavar='yes|no', default='no', type=strtobool,
                 help='default=%(default)s: Site output. Set "yes" to generate the output.')
psr.add_argument('--cs', metavar='yes|no', default='no', type=strtobool,
                 help='default=%(default)s: Combinatorial-site output. Set "yes" to generate the output.')
psr.add_argument('--cb', metavar='yes|no', default='yes', type=strtobool,
                 help='default=%(default)s: Combinatorial-branch output. Set "yes" to generate the output.')
psr.add_argument('--bs', metavar='yes|no', default='no', type=strtobool,
                 help='default=%(default)s: Branch-site output. 0 or 1. Set "yes" to generate the output.')
psr.add_argument('--cbs', metavar='yes|no', default='no', type=strtobool,
                 help='default=%(default)s: Combinatorial-branch-site output. Set "yes" to generate the output.')

# Omega calculation
psr.add_argument('--calc_omega', metavar='yes|no', default='yes', type=strtobool,
                 help='default=%(default)s: Calculate omega for convergence rate.')
psr.add_argument('--calc_distribution', metavar='yes|no', default='no', type=strtobool,
                 help='default=%(default)s: Calculate omega for convergence rate.')
psr.add_argument('--omega_method', metavar='[ind|rho]', default='ind', type=str,
                 choices=['ind','rho'],
                 help='default=%(default)s: Method to calculate omega. '
                      '"ind" for substitution-type-based expectation in which '
                      'all EXany2any, EXspe2any, EXany2spe, and EXspe2spe substitutions are individually calculated.'
                      '"rho" for a method in which EXany2spe is derived from EXany2any and an estimated parameter rho, '
                      'which represents any2spe/any2any ratio.')
psr.add_argument('--num_subsample', metavar='INTEGER', default=10000, type=int,
                 help='default=%(default)s: Activated if "--omega_method rho". The number of combinatorial branch resampling to estimate rho in higher-order analyses.')
psr.add_argument('--cb_stats', metavar='PATH', default=None, type=str,
                 help='default=%(default)s: Activated if "--omega_method rho". PATH to csubst_cb_stats.tsv. Use precalculated rho parameters in branch combination analysis.')
psr.add_argument('--cb_subsample', metavar='yes|no', default='yes', type=strtobool,
                 help='default=%(default)s: Activated if "--omega_method rho". cb subsample output.')

# Among-site rate variation
psr.add_argument('--asrv', metavar='no|pool|sn|each|file', default='each', type=str, choices=['no','pool','sn','each','file'],
                 help='default=%(default)s: Correct among-site rate variation in omega/quantile calculation.')
psr.add_argument('--asrv_file', metavar='PATH', default='infer', type=str,
                 help='default=%(default)s: Precalculated ASRV file. "infer" to automatically detect IQ-TREE\'s *.rate file.')

# Misc
psr.add_argument('--nslots', metavar='INTEGER', default=1, type=int,
                 help='default=%(default)s: The number of processors for parallel computations.')
psr.add_argument('--version', action='version', version='csubst version '+__version__)

args = psr.parse_args()
g = get_global_parameters(args)
csubst_start = time.time()
print('csubst start:', datetime.datetime.now(datetime.timezone.utc), flush=True)
csubst_main(g)
txt = "\ncsubst completed. Elapsed time = {:,} sec"
print(txt.format(int(time.time() - csubst_start)), flush=True)
print('csubst end:', datetime.datetime.now(datetime.timezone.utc), flush=True)
